<?php

namespace {{ rootNamespace }}Observers;

use {{ rootNamespace }}Models{{ subdiretory }}\{{ nameClass }};

class {{ nameClass }}Observer
{
    /**
     * Handle the {{ nameClass }} "retrieved" event.
     * after a record has been retrieved
     *
     * @param  \{{ rootNamespace }}Models{{ subdiretory }}\{{ nameClass }}  ${{ nameLower }}
     * @return void
     */
    public function retrieved({{ nameClass }} ${{ nameLower }})
    {
        //
    }

    /**
     * Handle the {{ nameClass }} "creating" event.
     * before a record has been created
     *
     * @param  \{{ rootNamespace }}Models{{ subdiretory }}\{{ nameClass }}  ${{ nameLower }}
     * @return void
     */
    public function creating({{ nameClass }} ${{ nameLower }})
    {
        //
    }

    /**
     * Handle the {{ nameClass }} "created" event.
     * after a record has been created
     *
     * @param  \{{ rootNamespace }}Models{{ subdiretory }}\{{ nameClass }}  ${{ nameLower }}
     * @return void
     */
    public function created({{ nameClass }} ${{ nameLower }})
    {
        //
    }

    /**
     * Handle the {{ nameClass }} "updating" event.
     * before a record is updated
     *
     * @param  \{{ rootNamespace }}Models{{ subdiretory }}\{{ nameClass }}  ${{ nameLower }}
     * @return void
     */
    public function updating({{ nameClass }} ${{ nameLower }})
    {
        //
    }

    /**
     * Handle the {{ nameClass }} "updated" event.
     * after a record has been updated.
     *
     * @param  \{{ rootNamespace }}Models{{ subdiretory }}\{{ nameClass }}  ${{ nameLower }}
     * @return void
     */
    public function updated({{ nameClass }} ${{ nameLower }})
    {
        //
    }

    /**
     * Handle the {{ nameClass }} "saving" event.
     * before a record is saved (either created or updated)
     *
     * @param  \{{ rootNamespace }}Models{{ subdiretory }}\{{ nameClass }}  ${{ nameLower }}
     * @return void
     */
    public function saving({{ nameClass }} ${{ nameLower }})
    {
        //
    }

    /**
     * Handle the {{ nameClass }} "saved" event.
     * after a record has been saved (either created or updated).
     *
     * @param  \{{ rootNamespace }}Models{{ subdiretory }}\{{ nameClass }}  ${{ nameLower }}
     * @return void
     */
    public function saved({{ nameClass }} ${{ nameLower }})
    {
        //
    }

    /**
     * Handle the {{ nameClass }} "deleting" event.
     * before a record is deleted or soft-deleted.
     *
     * @param  \{{ rootNamespace }}Models{{ subdiretory }}\{{ nameClass }}  ${{ nameLower }}
     * @return void
     */
    public function deleting({{ nameClass }} ${{ nameLower }})
    {
        //
    }

    /**
     * Handle the {{ nameClass }} "deleted" event.
     * after a record has been deleted or soft-deleted.
     *
     * @param  \{{ rootNamespace }}Models{{ subdiretory }}\{{ nameClass }}  ${{ nameLower }}
     * @return void
     */
    public function deleted({{ nameClass }} ${{ nameLower }})
    {
        //
    }

    /**
     * Handle the {{ nameClass }} "restoring" event.
     * before a soft-deleted record is going to be restored.
     *
     * @param  \{{ rootNamespace }}Models{{ subdiretory }}\{{ nameClass }}  ${{ nameLower }}
     * @return void
     */
    public function restoring({{ nameClass }} ${{ nameLower }})
    {
        //
    }

    /**
     * Handle the {{ nameClass }} "restored" event.
     * after a soft-deleted record has been restored.
     *
     * @param  \{{ rootNamespace }}Models{{ subdiretory }}\{{ nameClass }}  ${{ nameLower }}
     * @return void
     */
    public function restored({{ nameClass }} ${{ nameLower }})
    {
        //
    }

    /**
     * Handle the post "force deleted" event.
     *
     * @param  \{{ rootNamespace }}Models{{ subdiretory }}\{{ nameClass }}  ${{ nameLower }}
     * @return void
     */
    public function forceDeleted({{ nameClass }} ${{ nameLower }})
    {
        //
    }
}

/*
Add this lines in App\Providers\AppServiceProvider :
in top:
... namespace App\Providers

use {{ rootNamespace }}Models{{ subdiretory }}\{{ nameClass }};
use App\Observers\{{ nameClass }}Observer;

... class AppServiceProvider ...

in boot function:
... public function boot()

    {{ nameClass }}::observe({{ nameClass }}Observer::class);

... }

