<?php

namespace Tests\Unit{{ subdiretory }};

use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use App\Models{{ subdiretory }}\{{ nameClass }};
use App\Repositories{{ subdiretory }}\{{ nameClass }}Repository;

class {{ nameClass }}UnitTest extends TestCase
{
    use DatabaseMigrations;
 
    /** @test 
	 * Index
	 *
	 * @return void
	 */
	public function test{{ nameClass }}IndexWithError()
	{
        $this->assertTrue(true);
	}

	/** @test 
	 * Index
	 *
	 * @return void
	 */
	public function test{{ nameClass }}Index()
	{
        $this->assertTrue(true); 
	}

	/** @test 
	 * Create
	 *
	 * @return void
	 */
	public function test{{ nameClass }}CreateWithError()
	{
        $this->assertTrue(true);
	}

	/** @test 
	 * Create
	 *
	 * @return void
	 */
	public function test{{ nameClass }}Create()
	{
        $this->assertTrue(true); 
	}

	/** @test 
	 * Store
	 *
	 * @return void
	 */
	public function test{{ nameClass }}StoreWithError()
	{
        $this->assertTrue(true); 
	}

	/** @test 
	 * Store
	 *
	 * @return void
	 */
	public function test{{ nameClass }}Store()
	{
        $this->assertTrue(true);
	}

	/** @test 
	 * Show
	 *
	 * @return void
	 */
	public function test{{ nameClass }}ShowWithError()
	{
        $this->assertTrue(true);
	}

	/** @test 
	 * Show
	 *
	 * @return void
	 */
	public function test{{ nameClass }}Show()
	{
        $this->assertTrue(true);
	}

	/** @test 
	 * Edit
	 *
	 * @return void
	 */
	public function test{{ nameClass }}EditWithError()
	{
        $this->assertTrue(true); 
	}

	/** @test 
	 * Edit
	 *
	 * @return void
	 */
	public function test{{ nameClass }}Edit()
	{
        $this->assertTrue(true);
	}

	/** @test 
	 * Update
	 *
	 * @return void
	 */
	public function test{{ nameClass }}UpdateWithError()
	{
        $this->assertTrue(true);
	}

	/** @test 
	 * Update
	 *
	 * @return void
	 */
	public function test{{ nameClass }}Update()
	{
        $this->assertTrue(true);
	}

	/** @test 
	 * Destroy
	 *
	 * @return void
	 */
	public function test{{ nameClass }}DestroyWithError()
	{
        $this->assertTrue(true);
	}

	/** @test 
	 * Destroy
	 *
	 * @return void
	 */
	public function test{{ nameClass }}Destroy()
	{
        $this->assertTrue(true); 
	}

	/** @test 
	 * Restore
	 *
	 * @return void
	 */
	public function test{{ nameClass }}RestoreWithError()
	{
        $this->assertTrue(true);
	}

	/** @test 
	 * Restore
	 *
	 * @return void
	 */
	public function test{{ nameClass }}Restore()
	{
        $this->assertTrue(true);
	}

	/** @test 
	 * ForceDelete
	 *
	 * @return void
	 */
	public function test{{ nameClass }}ForceDeleteWithError()
	{
        $this->assertTrue(true);
	}

	/** @test 
	 * ForceDelete
	 *
	 * @return void
	 */
	public function test{{ nameClass }}ForceDelete()
	{
        $this->assertTrue(true);
	}

}
